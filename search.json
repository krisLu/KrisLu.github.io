[{"path":"/2023/09/19/sql优化/","content":"1.select * ​\t首先当查询sql时，*会增加sql查询解析的负担，当表字段量非常大，则每次查 *都会被重新解析字段对sql服务造成很大负担 ​\t第二就会覆盖索引，在条件查询时，通过索引进行查询，只查询一次b+树，而当查询*时候，则会先查非聚簇索引的b+树在查聚簇b+树 2.小数据集驱动大数据集（使用in而不是exists） ​\t使用select id from goods where name exists (select name …)如果goods表是一张非常大的表，则他会先查大表然后进行过滤，而in则会先查后边的表在查前边的表 3.尽量不要一条sql操作两张表。避免使用多表查询 12345select *from goods as gwhere g.restaurant_id in (select idfrom lrestaurantswhere wechat_id =1) 建议：例如查询id，可以在程序中将id查询出放入列表。作为参数。 4.使用批量插入代替循环插入 使用mybatis的insertBatch（list） 5.使用limit限制返回条数，避免内存溢出，查询接口尽量使用limit 6.es索引构建的定时任务 123select id, name from restaurantswhere updated_at &gt; (now()-2min) ; 7.分页查询优化 1234567select id, name,pricefrom goodslimit 1,30;王#随着pageNo不断增大,查询效率变低#int lastMaxId = 100;(前端传递)select id, name, pricefrom goodswhere id &gt; 100limit 1,30; 8.缩小过滤集的条件放到前边 123456select id, namefrom restaurantswhere is_deletedand wechat_id and discount &gt; 20# 先使用wechatId缩小范围在条件过滤"},{"title":"Hello World","path":"/2023/09/19/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"计算机图形学基础","path":"/about/index.html","content":"新的起点测试一下这里写会发生什么，我需要掌握什么。 了解计算机图形学学习计算机图形学大纲。 新的起点测试一下这里写会发生什么，我需要掌握什么。 了解计算机图形学学习计算机图形学大纲。"},{"path":"/notes/index.html","content":"写在前面gaohuayi欢迎来到我的笔记小站！ 终生学习的重要性不言而喻，培根说过：To live is to learn, to learn is not to live。意思是【活着就要学习，学习不是为了活着】。 以在有生之年，我将把我想学的知识系统地记录在这里，也希望能对你有帮助。"}]